TITLE lab6
;------------------------------------------------------------------------------
; Дисципліна: Архітектура компютера
;КНУУ "КПІ"
; Факультет: ФІОТ
; Курс: 2
; Група: ІТ-91
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------
IDEAL
;------------------------------------------------------------------------------
MACRO M_Exit ; Вихід з програми
            ; На вході: AL = код завершення програми
    mov ah, 04Ch ; Номер вектора переривання DOS для виходу
    int 21h  ; Виклик переривання
ENDM
;------------------------------------------------------------------------------
MACRO M_Init
 ; Ініціалізація DS і ES
    mov ax ,@data   ; ax <- @data
    mov ds, ax      ; ds <- ax
    mov es, ax      ; es <- ax
ENDM

IDEAL
MODEL small
STACK 256

DATASEG
    bak_int48h_offset   dw ? 
    ; Ефективна адреса функції стандартного обробника апаратного переривання

    bak_int48h_seg      dw ? ; Адреса початку сегменту функції апаратного переривання 
    message db "Hlib 25-11-2001 Victor 16-06-2001 Oleh 05-13-2002",10,13,'$'
; group 6 + 50 = 56 = 48h
CODESEG

PROC main
    M_Init  ; макрос ініціалізації


    ;ЕТАП І. Отримання еф. адреси і зміщення переривання.--------------------
                    ; Отримання ефективної адреси і зміщення
                    ; стандартного обробника переривання  для його заміни
    mov di, 48h     ; Номер вектора.
    call GetIntVector 
                    ; bx - еф. адреса, es сег. адреса)
    mov [bak_int48h_offset], bx 
    mov [bak_int48h_seg], es    

    ;ЕТАП ІІ. Збереження стандартного обробника переривань за іншим вектором
                    ; Вільні вектора 60h - 6Bh
    mov di, 62h     ; DI Вхідний аргумент - номер вектора
    mov dx, BX      ; DX Вхідний аргумент - еф. адреса процедури 
                    ; ES Вхідний аргумент - адреса сегмента процедури (та ж сама)
    call SetIntVector  ; Перенесення апаратного переривання на наш вектор - 62h

    ;ЕТАП ІІІ. Визначення нового обробника переривання з дод. функціоналом на вектор 48h.
                    ; На вектор int48h заносимо новий функціонал
    mov di, 48h     ; DI Вхідний аргумент - номер старого вектора пер.
    mov dx, OFFSET int48h   ; DX Вхідний аргумент - еф. адреса нової проц.
    mov ax, SEG int48h    ; ES Вхідний аргумент - адреса сегмента нової проц.
    mov es, ax              ; Завантажуємо таки ES. Оскільки
                            ; mov ES, SEG int0BhES не дозволено
    call SetIntVector       
                        ; Виклик кастомного переривання                        
    int 48h
    ;
    ; ЕТАП ІV. Повернення переривання INT 48h у вихідний стан.
    mov di, 48h
    mov dx, [bak_int48h_offset]
    mov ax, [bak_int48h_seg]
    mov es, ax
    call SetIntVector

    xor al, al  ; код <0>
    M_Exit ; Макрос для виходу з ОС
ENDP main


;                               Описання процедур (функцій)
;--------------------------------------------------------------------------
PROC GetIntVector
    ; Отримання логічної адреси процедури обробки переривання за номером вектора переривання
    ; Вхід:  DI <- номер вектора 
    ; Вихід: BX <- Ефективна адреса процедури обробки переривання
    ;        ES <- Адреса сегмента процедури обробки переривання
    ;--------------------------------------------------------------------------
    ; Збереження стану регістрів
    push ax
    push di
    xor ax, ax ; 0-> AX
    mov es, ax ; Перехід на початок сегменту 0000h
    shl di, 2  ; Множимо DI на 4 (зв’язок номера переривання і адреси)
    mov bx, es:[di] ; Ефективну адресу функції обробника в BX
    mov ax, es:[di + 2] ; Адресу сегменту функції обробника в АХ
    mov es, ax 
                ; Відновлення задіяних регістрів
    pop di
    pop ax
    ret ; Повернення
ENDP GetIntVector
;--------------------------------------------------------------------------
PROC SetIntVector
    ;  Установка на номер вектора нової функції обробника.
    ; До пам’яті що відповідає вектору заносимо ефективну адресу і адресу
    ; сегменту нового обробника переривань
    ; На вхід:  DI - номер переривання де буде нова процедура
    ;           DX - ефективна адреса нового обробника
    ;           ES - адреса сегмента нового обробника
    ; На вихід: ---
    ;--------------------------------------------------------------------------
    Cli ; Заборона апаратних переривань
        ; Збереження регістрів
    push ax
    push di
    push ds
    xor ax, ax ; очистка AX
    mov ds, ax ; переходимо до адреси 0000h
    shl di, 2 ; множимо DI на 4
    mov ds:[di], dx ; Еф. Адресу до першої частини вектору
    mov ds:[di + 2], es ; Адресу сегменту до другої частини вектору
            ; Відновлення регістрів
    pop ds
    pop di
    pop ax
    sti ; Дозвіл переривань. Відновлення вихідного стану МПС.
    ret 
ENDP SetIntVector
;--------------------------------------------------------------------------
    PROC int48h
        ;Нова процедура (функція) обробника переривання
        ; На вхід: ---
        ; На вихід: ---
        ;--------------------------------------------------------------------------
        push dx
        ; Вивід повідомлення на екран
        mov dx, offset message
        mov ah, 09h
        int 21h
        ; Вивели
        pop dx
        ; Закінчимо процедуру переривання
        mov al, 20h
        out 20h, al
        iret; Вихід з функції обробника відрізняється від звичайної процедрури
    ENDP int48h
END main 
